[{"id":"df83216f11ac48b3","type":"tab","label":"Node配置","disabled":false,"info":"","env":[]},{"id":"7faaab22d563f7e8","type":"inject","z":"df83216f11ac48b3","name":"","props":[{"p":"payload"}],"repeat":"2","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"str","x":130,"y":120,"wires":[["b0050398b5758086"]]},{"id":"cf945c2d5892ec1c","type":"http request","z":"df83216f11ac48b3","name":"beaconListRequest","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":510,"y":120,"wires":[["521127ef3a181b83"]]},{"id":"521127ef3a181b83","type":"function","z":"df83216f11ac48b3","name":"parserBeaconList","func":"// 从第一个请求中获取数据\nlet responseData = msg.payload;\n\n//获取settings.js里面的配置\nconst providersConfig = global.get('providersConfig');\n\n//初始化一个数组来存储每个请求的消息\nlet requests = [];\n\nfor (let macKey of Object.keys(responseData)) {\n    // 将 MAC 地址格式化为需要的形式，并转换为大写\n    let providerId = macKey\n        .replace(/(.{2})(.{2})(.{2})(.{2})(.{2})(.{2})/, '$1:$2:$3:FF:FE:$4:$5:$6')\n        .toUpperCase(); // 转换为大写\n\n    // 获取 x 和 y 值\n    let x = responseData[macKey].x; // 30.2\n    let y = responseData[macKey].y; // 20.75\n\n    // 获取 updatedAt 字段并转换为 ISO 格式\n    let timestamp = new Date(responseData[macKey].updatedAt).toISOString(); // 转换为 ISO 8601 格式\n\n    let payload = {\n        \"accuracy\": 1,\n        \"associated\": false,\n        \"course\": 32.2,\n        \"crs\": \"local\",\n        \"elevation_ref\": \"floor\",\n        \"floor\": 4,\n        \"heading_accuracy\": 4,\n        \"magnetic_heading\": 4,\n        \"position\": {\n            \"coordinates\": [x, y],\n            \"type\": \"Point\"\n        },\n        \"properties\": {},\n        \"provider_id\": providerId,\n        \"provider_type\": \"virtual\",\n        \"source\": \"d03ba253-c488-4ed8-8a3e-53b60b105098\",\n        \"speed\": 1.1,\n        \"timestamp_generated\": timestamp,\n        \"timestamp_sent\": timestamp,\n        \"true_heading\": 4\n    };\n\n    // 构建 PUT 请求的 URL\n    let url = `http://${providersConfig.host}:${providersConfig.port}/deephub/v2/providers/${providerId}/location`;\n\n    // 打印构建的 URL 以供调试\n    // node.log(\"Url for PUT request: \" + url);\n\n    // 创建一个新的消息对象并存储在 requests 数组中\n    requests.push({\n        url: url,\n        method: \"PUT\",\n        headers: {\n            'Content-Type': providersConfig.headers['Content-Type'],\n            'Authorization': `${providersConfig.authType} ${providersConfig.token}`\n        },\n        payload: payload\n    });\n}\n\n// 将 requests 数组存储到 msg 中，以便后续处理\nmsg.requests = requests;\n\n// 返回消息以发送 PUT 请求\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":120,"wires":[["ae46053ce640513c"]]},{"id":"ae46053ce640513c","type":"split","z":"df83216f11ac48b3","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"requests","x":110,"y":300,"wires":[["1418383475359bdb"]]},{"id":"1418383475359bdb","type":"function","z":"df83216f11ac48b3","name":"parserSplit","func":"\nlet request = msg.requests;\n\n// 为 HTTP 请求节点设置正确的字段\nmsg.url = request.url; // 使用 msg.url 而非 msg.payload.url\n// msg.method = request.method; // 设置 HTTP 方法\nmsg.headers = request.headers; // 设置请求头\nmsg.payload = request.payload; // 设置请求体\nmsg.method = request.method;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":300,"wires":[["11f43a7c02467b6d"]]},{"id":"11f43a7c02467b6d","type":"http request","z":"df83216f11ac48b3","name":"providers","method":"use","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":520,"y":300,"wires":[["2d71bec37dba05b7"]]},{"id":"2d71bec37dba05b7","type":"debug","z":"df83216f11ac48b3","name":"debug 1","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":710,"y":300,"wires":[]},{"id":"b0050398b5758086","type":"function","z":"df83216f11ac48b3","name":"function 1","func":"const beaconConfig = global.get('beaconListConfig');\n\nmsg.url = `http://${beaconConfig.host}:${beaconConfig.port}/beacons`;\nmsg.method = beaconConfig.method || 'GET'; // 默认为 GET\nmsg.headers = {\n    'Content-Type': beaconConfig.headers['Content-Type'],\n    'Authorization': `${beaconConfig.authType} ${beaconConfig.token}`\n};\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":280,"y":120,"wires":[["cf945c2d5892ec1c"]]}]